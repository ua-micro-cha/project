{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fruit Surface and Soil Microbiome Project","text":""},{"location":"#overview","title":"Overview","text":"<p>Welcome to the live journal, a.k.a. raw notes dump, for the Fruit Surface and Soil Microbiome Project. This page is a hub for documenting our research and learning opportunities.</p>"},{"location":"#objective","title":"Objective","text":"<p>The goal of this page is to maintain an organized, chronological archive of raw notes and observations that arise during this project. It will assist in tracking the development of our methodologies and the evolution of our data analysis strategies, ensuring reproducibility and continuous improvement in our research practices.</p>"},{"location":"#structure","title":"Structure","text":"<p>Journal entries include, but are not limited to:</p> <ul> <li>Bioinformatics Workflow: Drafts of code, error logs, successful scripts, and version updates</li> <li>Educational Activities: Insights and key takeaways from Project-related seminars, workshops, and training sessions</li> <li>Literature Insights: Recent studies, relevant scientific literature, and metagenomic tools that may inform and drive our research forward</li> </ul>"},{"location":"#navigation","title":"Navigation","text":"<p>Notes are categorized by date and are searchable. Each entry is written to provide quick insights into the challenges and solutions employed, offering a transparent view of the bioinformatics analysis happenings.</p> <p>Please share any suggestions or ideas to enhance the clarity and effectiveness of this page.</p>"},{"location":"240426/","title":"26 April 2024","text":""},{"location":"240426/#tree-fruit-kraken-2-scripts","title":"Tree Fruit Kraken 2 Scripts","text":"<p>Submitting Batch Jobs - Open the slurm script directory in the terminal. - Submit the script using the <code>sbatch</code> command: <pre><code>sbatch kr_orange_reads.slurm\n</code></pre></p>"},{"location":"240426/#kr_apple_readsslurm","title":"kr_apple_reads.slurm","text":"<pre><code>#!/bin/bash\n#SBATCH --job-name=kr_apple_reads\n#SBATCH --account=kcooper\n#SBATCH --partition=standard\n#SBATCH --nodes=1\n#SBATCH --ntasks=64\n#SBATCH --time=48:00:00\n#SBATCH --mem-per-cpu=12gb                   \n#SBATCH --mail-type=ALL\n\nmodule load anaconda/2020\nsource ~/.bashrc\nconda activate kraken2-env\ncd /xdisk/kcooper/caparicio/tree-fruit\n\nfor file in 01c_fastp_reads/*_1.trimmed.fastq\ndo\n    # Extract the base name of the file (without _1.trimmed.fastq)\n    base=$(basename $file _1.trimmed.fastq)\n\n    # Process only files with \"apples\" in the base name\n    if [[ $base != *\"apples\"* ]]; then\n        continue\n    fi\n\n    # Define input files\n    file1=\"01c_fastp_reads/${base}_1.trimmed.fastq\"\n    file2=\"01c_fastp_reads/${base}_2.trimmed.fastq\"\n\n    # Define output files and temporary files\n    output=\"04a_reads_kraken2/${base}_output.txt\"\n    temp_output=\"04a_reads_kraken2/${base}_output.tmp\"\n    report=\"04a_reads_kraken2/${base}_report.txt\"\n    temp_report=\"04a_reads_kraken2/${base}_report.tmp\"\n\n    # Check if output files from previous run exist and are incomplete, then remove them\n    if [ -f \"$output\" ] || [ -f \"$report\" ]; then\n        echo \"Incomplete or previous output files found for $base. Removing...\"\n        rm -f \"$output\" \"$report\"\n    fi\n\n    # Run Kraken2 with temporary output files\n    kraken2 --db /xdisk/kcooper/kcooper/database/Kraken_Special_DB \\\n            --confidence 0.1 \\\n            --report-minimizer-data \\\n            --output $temp_output \\\n            --paired \\\n            --report $temp_report \\\n            --memory-mapping \\\n            --use-names \\\n            $file1 \\\n            $file2\n\n    # Check if Kraken2 ran successfully and rename temporary files\n    if [ $? -eq 0 ]; then\n        mv \"$temp_output\" \"$output\"\n        mv \"$temp_report\" \"$report\"\n    else\n        echo \"Kraken2 failed for $base. Temporary files not renamed.\"\n    fi\ndone\n</code></pre>"},{"location":"240426/#kr_orange_readsslurm","title":"kr_orange_reads.slurm","text":"<pre><code>#!/bin/bash\n#SBATCH --job-name=kr_orange_reads\n#SBATCH --account=kcooper\n#SBATCH --partition=standard\n#SBATCH --nodes=1\n#SBATCH --ntasks=64\n#SBATCH --time=24:00:00\n#SBATCH --mem-per-cpu=20gb\n#SBATCH --mail-type=ALL\n\nmodule load anaconda/2020\nsource ~/.bashrc\nconda activate kraken2-env\n\nDB_PATH=\"/xdisk/kcooper/kcooper/database/Kraken_Special_DB\"\ncd /xdisk/kcooper/caparicio/tree-fruit\nOUTPUT_DIR=\"04a_reads_kraken2\"\nINPUT_DIR=\"01c_fastp_reads\"\nTHREADS=46\nCONFIDENCE=0.1\nREPORT_FILE=\"${OUTPUT_DIR}/kraken2_report.txt\"\nCHECKPOINT_FILE=\"${OUTPUT_DIR}/checkpoint.txt\"\n\n# Automated cleanup to ensure a clean slate before starting processing\necho \"Cleaning up incomplete files...\"\nfind ${OUTPUT_DIR} -name '*.tmp' -delete\n\n# Loop through files, skipping those already processed\nfor file in ${INPUT_DIR}/*oranges*1.trimmed.fastq; do\n    file_base=$(basename $file _1.trimmed.fastq)\n\n    # Skip files processed in previous runs\n    if [[ \"$LAST_PROCESSED\" &gt; \"$file_base\" ]]; then\n        continue\n    fi\n\n    paired_file=\"${INPUT_DIR}/${file_base}_2.trimmed.fastq\"\n    temp_output_file=\"${OUTPUT_DIR}/k2_${file_base}_output.txt.tmp\"\n    temp_report_file=\"${OUTPUT_DIR}/k2_${file_base}_report.txt.tmp\"\n    final_output_file=\"${OUTPUT_DIR}/k2_${file_base}_output.txt\"\n    final_report_file=\"${OUTPUT_DIR}/k2_${file_base}_report.txt\"\n\n    # Run Kraken2, directing output to temporary files, including minimizer data in the report\n    kraken2 --db $DB_PATH \\\n            --paired $file $paired_file \\\n            --output $temp_output_file \\\n            --report $temp_report_file \\\n            --report-minimizer-data \\\n            --memory-mapping \\\n            --use-names \\\n            --threads $THREADS \\\n            --confidence $CONFIDENCE &amp;&amp; {\n        mv $temp_output_file $final_output_file\n        mv $temp_report_file $final_report_file\n        echo $file_base &gt;&gt; $CHECKPOINT_FILE\n    } || {\n        echo \"Kraken 2 processing failed for $file_base. Cleaning up...\"\n        rm -f $temp_output_file $temp_report_file\n    }\ndone\n\n# Concatenate all individual reports into a comprehensive report\ncat ${OUTPUT_DIR}/*_report.txt.tmp &gt; $REPORT_FILE\n\n# Cleanup checkpoint file and temporary reports after successful run\nrm -f $CHECKPOINT_FILE\nrm -f ${OUTPUT_DIR}/*_report.txt.tmp\n</code></pre>"},{"location":"240426/#kr_peach_readsslurm","title":"kr_peach_reads.slurm","text":"<pre><code>#!/bin/bash\n#SBATCH --job-name=kr_peach_reads\n#SBATCH --account=kcooper\n#SBATCH --partition=standard\n#SBATCH --nodes=1\n#SBATCH --ntasks=60\n#SBATCH --time=24:00:00\n#SBATCH --mem-per-cpu=20gb\n#SBATCH --mail-type=ALL\n\nmodule load anaconda/2020\nsource ~/.bashrc\nconda activate kraken2-env\n\nDB_PATH=\"/xdisk/kcooper/kcooper/database/Kraken_Special_DB\"\ncd /xdisk/kcooper/caparicio/tree-fruit\nOUTPUT_DIR=\"04a_reads_kraken2\"\nINPUT_DIR=\"01c_fastp_reads\"\nTHREADS=46\nCONFIDENCE=0.1\nREPORT_FILE=\"${OUTPUT_DIR}/kraken2_report.txt\"\nCHECKPOINT_FILE=\"${OUTPUT_DIR}/checkpoint.txt\"\n\n# Automated cleanup to ensure a clean slate before starting processing\necho \"Cleaning up incomplete files...\"\nfind ${OUTPUT_DIR} -name '*.tmp' -delete\n\n# Loop through files, skipping those already processed\nfor file in ${INPUT_DIR}/*peaches*1.trimmed.fastq; do\n    file_base=$(basename $file _1.trimmed.fastq)\n\n    # Skip files processed in previous runs\n    if [[ \"$LAST_PROCESSED\" &gt; \"$file_base\" ]]; then\n        continue\n    fi\n\n    paired_file=\"${INPUT_DIR}/${file_base}_2.trimmed.fastq\"\n    temp_output_file=\"${OUTPUT_DIR}/k2_${file_base}_output.txt.tmp\"\n    temp_report_file=\"${OUTPUT_DIR}/k2_${file_base}_report.txt.tmp\"\n    final_output_file=\"${OUTPUT_DIR}/k2_${file_base}_output.txt\"\n    final_report_file=\"${OUTPUT_DIR}/k2_${file_base}_report.txt\"\n\n    # Run Kraken2, directing output to temporary files, including minimizer data in the report\n    kraken2 --db $DB_PATH \\\n            --paired $file $paired_file \\\n            --output $temp_output_file \\\n            --report $temp_report_file \\\n            --report-minimizer-data \\\n            --memory-mapping \\\n            --use-names \\\n            --threads $THREADS \\\n            --confidence $CONFIDENCE &amp;&amp; {\n        mv $temp_output_file $final_output_file\n        mv $temp_report_file $final_report_file\n        echo $file_base &gt;&gt; $CHECKPOINT_FILE\n    } || {\n        echo \"Kraken 2 processing failed for $file_base. Cleaning up...\"\n        rm -f $temp_output_file $temp_report_file\n    }\ndone\n\n# Concatenate all individual reports into a comprehensive report\ncat ${OUTPUT_DIR}/*_report.txt.tmp &gt; $REPORT_FILE\n\n# Cleanup checkpoint file and temporary reports after successful run\nrm -f $CHECKPOINT_FILE\nrm -f ${OUTPUT_DIR}/*_report.txt.tmp\n</code></pre>"},{"location":"240426/#using-mambaconda-in-jupyter","title":"Using Mamba/Conda in Jupyter","text":"<p>HPC GUI Jobs</p> <p>Configuring a Jupyter Notebook to use an already-existing kraken 2 environment: 1. Launch Interactive Desktop Run Time = 24 ; Core count on a single node = 60 ; Memory per core = 20</p> <p></p> <ol> <li>Load Anaconda Module In the interactive terminal, load the Anaconda module to access the <code>conda</code> command: <pre><code>module load anaconda/2020\n</code></pre></li> <li>Activate the Kraken 2 Conda Environment <pre><code>conda activate kraken2-env\n</code></pre></li> <li>Install IPython Kernel Install the IPython kernel in <code>kraken2-env</code> to make it available in Jupyter <pre><code>conda install ipykernel\n</code></pre></li> <li>Add the iPython Kernel to the  Kraken 2 Jupyter Environment <pre><code>python -m ipykernel install --user --name kraken2-env --display-name \"Python (kraken2-env)\"\n</code></pre></li> <li> <p>After adding the kernel, the interactive terminal session can be closed. </p> </li> <li> <p>Restart the Jupyter Session Log out and start a new Jupyter session to refresh the kernel list.</p> </li> <li> <p>Select the New Kernel from the \"New\" Dropdown Menu When starting a new notebook, select the \"Python (kraken2-env)\" kernel to use in the custom environment.</p> </li> </ol> <p>These steps ensure that the <code>kraken2-env</code> is available as a kernel in Jupyter notebooks, allowing the Python version management and Kraken 2 access.</p> <p>Once an IPython kernel  has been created for <code>kraken2-env</code>, the new kernel becomes a permanent option in the Jupyter Notebook interface.</p>"},{"location":"240426/#how-it-works","title":"How It Works","text":"<p>By running <code>ipykernel install --user --name kraken2-env --display-name \"Python (kraken2-env)\"</code>, a JSON file for this kernel is created in the Jupyter kernels directory (typically <code>.local/share/jupyter/kernels/kraken2-env/</code> on Unix-like systems). This JSON file contains the metadata necessary for Jupyter to identify and launch the kernel, including the path to the Python executable within the activated conda environment.</p>"},{"location":"240426/#ensuring-the-kernel-appears-in-subsequent-sessions","title":"Ensuring the Kernel Appears in Subsequent Sessions","text":"<ul> <li>Permanent User Option: As long as the kernel's JSON configuration file remains in its directory and points to a valid Python executable within an accessible conda environment, it will appear as an option every time the Jupyter Notebook server starts from any location on the same system/user account.</li> <li>Recalling the Kernel: When creating a new notebook (or opening an existing one), select the \u201cPython (kraken2-env)\u201d kernel from the Kernel menu or the dropdown menu to start a notebook in that environment.</li> </ul>"},{"location":"240426/#if-the-kernel-doesnt-appear","title":"If the Kernel Doesn't Appear","text":"<ul> <li>Environment Changes: If the kernel doesn't appear, ensure the <code>kraken2-env</code> environment and its IPython kernel installation haven't been altered or deleted.</li> <li>Jupyter Configuration: Check the Jupyter configuration to ensure it's scanning the correct directories for kernel specifications. Running <code>jupyter kernelspec list</code> in the terminal will show you the paths to the kernels available.</li> </ul>"},{"location":"240426/#execute-shell-commands-in-jupyter","title":"Execute Shell Commands in Jupyter","text":"<ul> <li>Dr. Liz\u00e1rraga's Command Line Interface Shell</li> <li>The Jupyter Notebook</li> <li>Data Lab's Jupyter Notebooks</li> <li>Data Lab's [2024 Spring] Data Science Essentials Series - Introduction to Jupyter Notebooks YouTube</li> <li>Install Jupyter Book via CyVerse Foundational Open Science Skills 2024   Documentation &amp; Communication</li> <li>HPC: Jupyter in Singularity YouTube</li> <li>AnacondaTFJupyter YouTube</li> <li>CyVerse Webinar: Writing and Sharing Computational Analyses in Jupyter Notebooks YouTube</li> </ul> <p>ERROR: Indicates an attempt to execute shell commands in a Python environment within a Jupyter notebook. Python requires specific formatting to understand bash/shell syntax for executing shell commands. Two options to resolve issues in Jupyter notebook cell:</p>"},{"location":"240426/#option-1-use-ipython-magic-command-for-shell-execution","title":"Option 1: Use IPython Magic Command for Shell Execution","text":"<p>IPython, upon which Jupyter notebooks are based, provides magic commands that extend the normal Python syntax. For running shell commands, use the <code>!</code> prefix or the <code>%%bash</code> cell magic for multi-line shell scripts.</p>"},{"location":"240426/#applying-for-single-line-commands","title":"Applying <code>!</code> for Single Line Commands:","text":"<p>To execute single-line shell commands, start the command with <code>!</code>: <pre><code>!echo \"Cleaning up incomplete files...\"\n</code></pre></p>"},{"location":"240426/#using-bash-for-multi-line-scripts","title":"Using <code>%%bash</code> for Multi-line Scripts:","text":"<p>For multi-line scripts, use the <code>%%bash</code> magic at the beginning of the cell. This tells Jupyter that the entire cell contains bash commands: <pre><code>%%bash\n# Define directories\nOUTPUT_DIR=\"your/output/dir\"\n\n# Function to clean up incomplete or corrupted files\ncleanup() {\n    echo \"Cleaning up incomplete files...\"\n    find ${OUTPUT_DIR} -name '*.tmp' -delete\n}\n\n# Automated cleanup at start to ensure a clean slate\ncleanup\n</code></pre> Note: Ensure that <code>OUTPUT_DIR</code> is set to the correct directory path where your output files are stored.</p>"},{"location":"240426/#option-2-use-python-to-perform-the-same-task","title":"Option 2: Use Python to Perform the Same Task","text":"<p>Alternatively, translate bash functions into Python to accomplish same, leveraging Python's <code>os</code> and <code>glob</code> modules for directory and file operations: <pre><code>import os\nimport glob\n\n# Define directories\nOUTPUT_DIR = \"your/output/dir\"\n\ndef cleanup():\n    print(\"Cleaning up incomplete files...\")\n    for tmp_file in glob.glob(os.path.join(OUTPUT_DIR, '*.tmp')):\n        os.remove(tmp_file)\n\n# Automated cleanup at start to ensure a clean slate\ncleanup()\n</code></pre> This Python version accomplishes as the bash script above, but in Jupyter notebook's native Python environment.</p>"},{"location":"240426/#sample-tracker","title":"Sample Tracker","text":"<p>document$.subscribe(function() {   var tables = document.querySelectorAll(\"article table:not([class])\")   tables.forEach(function(table) {     new Tablesort(table)   }) })</p> sample(s) stage program status queue time cluster run time hrs:min Job # ntaskts (CPU -t) Mem -m file location script script location queue 4/24/2024 puma 24 9673002-missed 62 20 1240 jupyter apples313 alignment blast queue 4/23/2024 puma 24 9670368-missed 62 20 1240 /kcooper/caparicio/tree-fruit/07a_reads_blast apple_blast.ipynb /kcooper/caparicio/tree-fruit/07batch tree fruit reads biom file kraken-biom queue 4/23/2024 puma 12 9666325-missed 42 20 840 /kcooper/caparicio/tree-fruit/05_kraken-biom interactive /kcooper/caparicio/tree-fruit/05batch apples313 arg deeparg queue 4/22/2024 puma 24 9661323-missed 62 20 1240 /kcooper/caparicio/tree-fruit/09_deeparg apple_deeparg.ipynb /kcooper/caparicio/tree-fruit/09batch apples313 arg deeparg in progress 1-22:16:37 puma 24 9607499 62 20 1240 /kcooper/caparicio/tree-fruit/09_deeparg apple_deeparg.ipynb /kcooper/caparicio/tree-fruit/09batch apples313 arg deeparg in progress 1-22:16:37 puma 24 9607499 62 20 1240 /kcooper/caparicio/tree-fruit/09_deeparg apple_deeparg.ipynb /kcooper/caparicio/tree-fruit/09batch apples313 alignment blast in progress 2-13:54:46 puma 24 9544144 62 20 1240 /kcooper/caparicio/tree-fruit/07a_reads_blast apple_blast.ipynb /kcooper/caparicio/tree-fruit/07batch apples313 alignment blast in progress 2-18:24:00 puma 24 9532276 62 20 1240 /kcooper/caparicio/tree-fruit/07a_reads_blast apple_blast.ipynb /kcooper/caparicio/tree-fruit/07batch apples313 alignment blast in progress 0:02:11 puma 24 9514722 62 20 1240 /kcooper/caparicio/tree-fruit/07a_reads_blast apple_blast.ipynb /kcooper/caparicio/tree-fruit/07batch apple assembly metaSPAdes (SPAdes) queue puma 48 9678741 64 25 1600 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch peach assembly metaSPAdes (SPAdes) queue puma 48 9659598 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch peach_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) queue puma 48 9656556 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch orange_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 1-09:33:21 puma 48 9656539 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch peach assembly metaSPAdes (SPAdes) in progress 1-13:59:27 puma 48 9659598 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch peach_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 1-01:53:22 puma 48 9626829 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) in progress 1-20:23:44 puma 48 9607486 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch orange_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch peach assembly metaSPAdes (SPAdes) in progress 2-07:44:37 puma 0:00 9569668 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch peach_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 2-01:55:18 puma 48 9569667 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch peach assembly metaSPAdes (SPAdes) in progress 8-12:40:52 puma 48 9481898 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch peach_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) in progress 1-22:23:40 puma 48 9544142 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch orange_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 5-01:30:51 puma 48 9510852 60 20 1200 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) in progress 8-07:36:36 puma 48 9455659 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch orange_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 9-19:56:59 puma 0:00 9475436 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 9-10:02:53 puma 48 9452625 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 9-20:30:02 puma 48 9448076 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange taxonomic class kraken 2 complete 9-06:30:40 puma 24 9444742 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 kr_orange_reads.ipynb cd /xdisk/kcooper/caparicio/tree-fruit/03batch peach taxonomic class kraken 2 complete 10-03:45:32 puma 24 9444741 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch kr_peach_reads.slurm cd /xdisk/kcooper/caparicio/tree-fruit/03batch orange taxonomic class kraken 2 in progress puma 24 9431841 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch kr_orange_reads.slurm cd /xdisk/kcooper/caparicio/tree-fruit/03batch apple assembly metaSPAdes (SPAdes) in progress puma 0:00 9448076 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly apple_read_assembly.ipynb cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) REDOcompleteBUT NO FASTA puma 48 9004247 64 var var cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apples_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch YumaHarvC10-YumaSoil633 poly-g removal fastp debug puma 0:00 9398738 64 20 1280 cd /xdisk/kcooper/caparicio/MELONS/01c_fastp_reads2 melon_fastp.ipynb melon_soil_fastp.ipynb cd /xdisk/kcooper/caparicio/MELONS/ orange taxonomic class kraken 2 puma 24 9245197 64 32 2048 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch kr_orange_reads.slurm cd /xdisk/kcooper/caparicio/tree-fruit/03batch peach taxonomic class kraken 2 debug puma 24 9245195 64 32 2048 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch kr_peach_reads.slurm cd /xdisk/kcooper/caparicio/tree-fruit/03batch melon poly-g removal fastp debug puma 24 9247470 48 4 192 cd /xdisk/kcooper/caparicio/MELONS/01c_fastp_reads sbatch melon_fastp.slurm cd /xdisk/kcooper/caparicio/MELONS/ melon soil poly-g removal fastp in progress puma 24 9247471 48 4 192 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch melon_soil_fastp.slurm cd /xdisk/kcooper/caparicio/MELONS/ tree-fruit poly-g removal fastp complete puma 0:55 8662642 48 4 192 cd /xdisk/kcooper/caparicio/tree-fruit/01c_fastp_reads sbatch fruit_01c_fastp.slurm cd /xdisk/kcooper/caparicio/tree-fruit melon/soil poly-g removal fastp debug puma 528 9132669 48 4 192 cd /xdisk/kcooper/caparicio/MELONS/01c_fastp_reads sbatch melon_fastp.slurm cd /xdisk/kcooper/caparicio/MELONS apple assembly metaSPAdes (SPAdes) REDOcompleteBUT NO FASTA puma 48 9004247 64 var var cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apples_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch peach assembly metaSPAdes (SPAdes) killed ocelote 972 2757752 28 var var cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch peach_assem.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) killed elgato 144 1777319 16 var var cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch oranges_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) killed elgato 144 1777319 16 var var cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch oranges_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple taxonomic class kraken 2 complete puma 48 9016680 64 12 768 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch kr_apple_reads.slurm cd /xdisk/kcooper/caparicio/tree-fruit/03batch tree fruit fastq to fasta seqtk complete elgato 0:35 1803380 8 4 32 cd /xdisk/kcooper/caparicio/tree-fruit/01d_fasta sbatch tree-fruit_fasta.slurm cd /xdisk/kcooper/caparicio/tree-fruit/01d_fasta"},{"location":"240426/#bioinformatics-workflow","title":"Bioinformatics Workflow","text":""},{"location":"240510/","title":"26 April 2024","text":""},{"location":"240510/#tree-fruit-kraken-2-scripts","title":"Tree Fruit Kraken 2 Scripts","text":"<p>Submitting Batch Jobs - Open the slurm script directory in the terminal. - Submit the script using the <code>sbatch</code> command: <pre><code>sbatch kr_orange_reads.slurm\n</code></pre></p>"},{"location":"240510/#kr_apple_readsslurm","title":"kr_apple_reads.slurm","text":"<pre><code>#!/bin/bash\n#SBATCH --job-name=kr_apple_reads\n#SBATCH --account=kcooper\n#SBATCH --partition=standard\n#SBATCH --nodes=1\n#SBATCH --ntasks=64\n#SBATCH --time=48:00:00\n#SBATCH --mem-per-cpu=12gb                   \n#SBATCH --mail-type=ALL\n\nmodule load anaconda/2020\nsource ~/.bashrc\nconda activate kraken2-env\ncd /xdisk/kcooper/caparicio/tree-fruit\n\nfor file in 01c_fastp_reads/*_1.trimmed.fastq\ndo\n    # Extract the base name of the file (without _1.trimmed.fastq)\n    base=$(basename $file _1.trimmed.fastq)\n\n    # Process only files with \"apples\" in the base name\n    if [[ $base != *\"apples\"* ]]; then\n        continue\n    fi\n\n    # Define input files\n    file1=\"01c_fastp_reads/${base}_1.trimmed.fastq\"\n    file2=\"01c_fastp_reads/${base}_2.trimmed.fastq\"\n\n    # Define output files and temporary files\n    output=\"04a_reads_kraken2/${base}_output.txt\"\n    temp_output=\"04a_reads_kraken2/${base}_output.tmp\"\n    report=\"04a_reads_kraken2/${base}_report.txt\"\n    temp_report=\"04a_reads_kraken2/${base}_report.tmp\"\n\n    # Check if output files from previous run exist and are incomplete, then remove them\n    if [ -f \"$output\" ] || [ -f \"$report\" ]; then\n        echo \"Incomplete or previous output files found for $base. Removing...\"\n        rm -f \"$output\" \"$report\"\n    fi\n\n    # Run Kraken2 with temporary output files\n    kraken2 --db /xdisk/kcooper/kcooper/database/Kraken_Special_DB \\\n            --confidence 0.1 \\\n            --report-minimizer-data \\\n            --output $temp_output \\\n            --paired \\\n            --report $temp_report \\\n            --memory-mapping \\\n            --use-names \\\n            $file1 \\\n            $file2\n\n    # Check if Kraken2 ran successfully and rename temporary files\n    if [ $? -eq 0 ]; then\n        mv \"$temp_output\" \"$output\"\n        mv \"$temp_report\" \"$report\"\n    else\n        echo \"Kraken2 failed for $base. Temporary files not renamed.\"\n    fi\ndone\n</code></pre>"},{"location":"240510/#kr_orange_readsslurm","title":"kr_orange_reads.slurm","text":"<pre><code>#!/bin/bash\n#SBATCH --job-name=kr_orange_reads\n#SBATCH --account=kcooper\n#SBATCH --partition=standard\n#SBATCH --nodes=1\n#SBATCH --ntasks=64\n#SBATCH --time=24:00:00\n#SBATCH --mem-per-cpu=20gb\n#SBATCH --mail-type=ALL\n\nmodule load anaconda/2020\nsource ~/.bashrc\nconda activate kraken2-env\n\nDB_PATH=\"/xdisk/kcooper/kcooper/database/Kraken_Special_DB\"\ncd /xdisk/kcooper/caparicio/tree-fruit\nOUTPUT_DIR=\"04a_reads_kraken2\"\nINPUT_DIR=\"01c_fastp_reads\"\nTHREADS=46\nCONFIDENCE=0.1\nREPORT_FILE=\"${OUTPUT_DIR}/kraken2_report.txt\"\nCHECKPOINT_FILE=\"${OUTPUT_DIR}/checkpoint.txt\"\n\n# Automated cleanup to ensure a clean slate before starting processing\necho \"Cleaning up incomplete files...\"\nfind ${OUTPUT_DIR} -name '*.tmp' -delete\n\n# Loop through files, skipping those already processed\nfor file in ${INPUT_DIR}/*oranges*1.trimmed.fastq; do\n    file_base=$(basename $file _1.trimmed.fastq)\n\n    # Skip files processed in previous runs\n    if [[ \"$LAST_PROCESSED\" &gt; \"$file_base\" ]]; then\n        continue\n    fi\n\n    paired_file=\"${INPUT_DIR}/${file_base}_2.trimmed.fastq\"\n    temp_output_file=\"${OUTPUT_DIR}/k2_${file_base}_output.txt.tmp\"\n    temp_report_file=\"${OUTPUT_DIR}/k2_${file_base}_report.txt.tmp\"\n    final_output_file=\"${OUTPUT_DIR}/k2_${file_base}_output.txt\"\n    final_report_file=\"${OUTPUT_DIR}/k2_${file_base}_report.txt\"\n\n    # Run Kraken2, directing output to temporary files, including minimizer data in the report\n    kraken2 --db $DB_PATH \\\n            --paired $file $paired_file \\\n            --output $temp_output_file \\\n            --report $temp_report_file \\\n            --report-minimizer-data \\\n            --memory-mapping \\\n            --use-names \\\n            --threads $THREADS \\\n            --confidence $CONFIDENCE &amp;&amp; {\n        mv $temp_output_file $final_output_file\n        mv $temp_report_file $final_report_file\n        echo $file_base &gt;&gt; $CHECKPOINT_FILE\n    } || {\n        echo \"Kraken 2 processing failed for $file_base. Cleaning up...\"\n        rm -f $temp_output_file $temp_report_file\n    }\ndone\n\n# Concatenate all individual reports into a comprehensive report\ncat ${OUTPUT_DIR}/*_report.txt.tmp &gt; $REPORT_FILE\n\n# Cleanup checkpoint file and temporary reports after successful run\nrm -f $CHECKPOINT_FILE\nrm -f ${OUTPUT_DIR}/*_report.txt.tmp\n</code></pre>"},{"location":"240510/#kr_peach_readsslurm","title":"kr_peach_reads.slurm","text":"<pre><code>#!/bin/bash\n#SBATCH --job-name=kr_peach_reads\n#SBATCH --account=kcooper\n#SBATCH --partition=standard\n#SBATCH --nodes=1\n#SBATCH --ntasks=60\n#SBATCH --time=24:00:00\n#SBATCH --mem-per-cpu=20gb\n#SBATCH --mail-type=ALL\n\nmodule load anaconda/2020\nsource ~/.bashrc\nconda activate kraken2-env\n\nDB_PATH=\"/xdisk/kcooper/kcooper/database/Kraken_Special_DB\"\ncd /xdisk/kcooper/caparicio/tree-fruit\nOUTPUT_DIR=\"04a_reads_kraken2\"\nINPUT_DIR=\"01c_fastp_reads\"\nTHREADS=46\nCONFIDENCE=0.1\nREPORT_FILE=\"${OUTPUT_DIR}/kraken2_report.txt\"\nCHECKPOINT_FILE=\"${OUTPUT_DIR}/checkpoint.txt\"\n\n# Automated cleanup to ensure a clean slate before starting processing\necho \"Cleaning up incomplete files...\"\nfind ${OUTPUT_DIR} -name '*.tmp' -delete\n\n# Loop through files, skipping those already processed\nfor file in ${INPUT_DIR}/*peaches*1.trimmed.fastq; do\n    file_base=$(basename $file _1.trimmed.fastq)\n\n    # Skip files processed in previous runs\n    if [[ \"$LAST_PROCESSED\" &gt; \"$file_base\" ]]; then\n        continue\n    fi\n\n    paired_file=\"${INPUT_DIR}/${file_base}_2.trimmed.fastq\"\n    temp_output_file=\"${OUTPUT_DIR}/k2_${file_base}_output.txt.tmp\"\n    temp_report_file=\"${OUTPUT_DIR}/k2_${file_base}_report.txt.tmp\"\n    final_output_file=\"${OUTPUT_DIR}/k2_${file_base}_output.txt\"\n    final_report_file=\"${OUTPUT_DIR}/k2_${file_base}_report.txt\"\n\n    # Run Kraken2, directing output to temporary files, including minimizer data in the report\n    kraken2 --db $DB_PATH \\\n            --paired $file $paired_file \\\n            --output $temp_output_file \\\n            --report $temp_report_file \\\n            --report-minimizer-data \\\n            --memory-mapping \\\n            --use-names \\\n            --threads $THREADS \\\n            --confidence $CONFIDENCE &amp;&amp; {\n        mv $temp_output_file $final_output_file\n        mv $temp_report_file $final_report_file\n        echo $file_base &gt;&gt; $CHECKPOINT_FILE\n    } || {\n        echo \"Kraken 2 processing failed for $file_base. Cleaning up...\"\n        rm -f $temp_output_file $temp_report_file\n    }\ndone\n\n# Concatenate all individual reports into a comprehensive report\ncat ${OUTPUT_DIR}/*_report.txt.tmp &gt; $REPORT_FILE\n\n# Cleanup checkpoint file and temporary reports after successful run\nrm -f $CHECKPOINT_FILE\nrm -f ${OUTPUT_DIR}/*_report.txt.tmp\n</code></pre>"},{"location":"240510/#using-mambaconda-in-jupyter","title":"Using Mamba/Conda in Jupyter","text":"<p>HPC GUI Jobs</p> <p>Configuring a Jupyter Notebook to use an already-existing kraken 2 environment: 1. Launch Interactive Desktop Run Time = 24 ; Core count on a single node = 60 ; Memory per core = 20</p> <p></p> <ol> <li>Load Anaconda Module In the interactive terminal, load the Anaconda module to access the <code>conda</code> command: <pre><code>module load anaconda/2020\n</code></pre></li> <li>Activate the Kraken 2 Conda Environment <pre><code>conda activate kraken2-env\n</code></pre></li> <li>Install IPython Kernel Install the IPython kernel in <code>kraken2-env</code> to make it available in Jupyter <pre><code>conda install ipykernel\n</code></pre></li> <li>Add the iPython Kernel to the  Kraken 2 Jupyter Environment <pre><code>python -m ipykernel install --user --name kraken2-env --display-name \"Python (kraken2-env)\"\n</code></pre></li> <li> <p>After adding the kernel, the interactive terminal session can be closed. </p> </li> <li> <p>Restart the Jupyter Session Log out and start a new Jupyter session to refresh the kernel list.</p> </li> <li> <p>Select the New Kernel from the \"New\" Dropdown Menu When starting a new notebook, select the \"Python (kraken2-env)\" kernel to use in the custom environment.</p> </li> </ol> <p>These steps ensure that the <code>kraken2-env</code> is available as a kernel in Jupyter notebooks, allowing the Python version management and Kraken 2 access.</p> <p>Once an IPython kernel  has been created for <code>kraken2-env</code>, the new kernel becomes a permanent option in the Jupyter Notebook interface.</p>"},{"location":"240510/#how-it-works","title":"How It Works","text":"<p>By running <code>ipykernel install --user --name kraken2-env --display-name \"Python (kraken2-env)\"</code>, a JSON file for this kernel is created in the Jupyter kernels directory (typically <code>.local/share/jupyter/kernels/kraken2-env/</code> on Unix-like systems). This JSON file contains the metadata necessary for Jupyter to identify and launch the kernel, including the path to the Python executable within the activated conda environment.</p>"},{"location":"240510/#ensuring-the-kernel-appears-in-subsequent-sessions","title":"Ensuring the Kernel Appears in Subsequent Sessions","text":"<ul> <li>Permanent User Option: As long as the kernel's JSON configuration file remains in its directory and points to a valid Python executable within an accessible conda environment, it will appear as an option every time the Jupyter Notebook server starts from any location on the same system/user account.</li> <li>Recalling the Kernel: When creating a new notebook (or opening an existing one), select the \u201cPython (kraken2-env)\u201d kernel from the Kernel menu or the dropdown menu to start a notebook in that environment.</li> </ul>"},{"location":"240510/#if-the-kernel-doesnt-appear","title":"If the Kernel Doesn't Appear","text":"<ul> <li>Environment Changes: If the kernel doesn't appear, ensure the <code>kraken2-env</code> environment and its IPython kernel installation haven't been altered or deleted.</li> <li>Jupyter Configuration: Check the Jupyter configuration to ensure it's scanning the correct directories for kernel specifications. Running <code>jupyter kernelspec list</code> in the terminal will show you the paths to the kernels available.</li> </ul>"},{"location":"240510/#execute-shell-commands-in-jupyter","title":"Execute Shell Commands in Jupyter","text":"<ul> <li>Dr. Liz\u00e1rraga's Command Line Interface Shell</li> <li>The Jupyter Notebook</li> <li>Data Lab's Jupyter Notebooks</li> <li>Data Lab's [2024 Spring] Data Science Essentials Series - Introduction to Jupyter Notebooks YouTube</li> <li>Install Jupyter Book via CyVerse Foundational Open Science Skills 2024   Documentation &amp; Communication</li> <li>HPC: Jupyter in Singularity YouTube</li> <li>AnacondaTFJupyter YouTube</li> <li>CyVerse Webinar: Writing and Sharing Computational Analyses in Jupyter Notebooks YouTube</li> </ul> <p>ERROR: Indicates an attempt to execute shell commands in a Python environment within a Jupyter notebook. Python requires specific formatting to understand bash/shell syntax for executing shell commands. Two options to resolve issues in Jupyter notebook cell:</p>"},{"location":"240510/#option-1-use-ipython-magic-command-for-shell-execution","title":"Option 1: Use IPython Magic Command for Shell Execution","text":"<p>IPython, upon which Jupyter notebooks are based, provides magic commands that extend the normal Python syntax. For running shell commands, use the <code>!</code> prefix or the <code>%%bash</code> cell magic for multi-line shell scripts.</p>"},{"location":"240510/#applying-for-single-line-commands","title":"Applying <code>!</code> for Single Line Commands:","text":"<p>To execute single-line shell commands, start the command with <code>!</code>: <pre><code>!echo \"Cleaning up incomplete files...\"\n</code></pre></p>"},{"location":"240510/#using-bash-for-multi-line-scripts","title":"Using <code>%%bash</code> for Multi-line Scripts:","text":"<p>For multi-line scripts, use the <code>%%bash</code> magic at the beginning of the cell. This tells Jupyter that the entire cell contains bash commands: <pre><code>%%bash\n# Define directories\nOUTPUT_DIR=\"your/output/dir\"\n\n# Function to clean up incomplete or corrupted files\ncleanup() {\n    echo \"Cleaning up incomplete files...\"\n    find ${OUTPUT_DIR} -name '*.tmp' -delete\n}\n\n# Automated cleanup at start to ensure a clean slate\ncleanup\n</code></pre> Note: Ensure that <code>OUTPUT_DIR</code> is set to the correct directory path where your output files are stored.</p>"},{"location":"240510/#option-2-use-python-to-perform-the-same-task","title":"Option 2: Use Python to Perform the Same Task","text":"<p>Alternatively, translate bash functions into Python to accomplish same, leveraging Python's <code>os</code> and <code>glob</code> modules for directory and file operations: <pre><code>import os\nimport glob\n\n# Define directories\nOUTPUT_DIR = \"your/output/dir\"\n\ndef cleanup():\n    print(\"Cleaning up incomplete files...\")\n    for tmp_file in glob.glob(os.path.join(OUTPUT_DIR, '*.tmp')):\n        os.remove(tmp_file)\n\n# Automated cleanup at start to ensure a clean slate\ncleanup()\n</code></pre> This Python version accomplishes as the bash script above, but in Jupyter notebook's native Python environment.</p>"},{"location":"240510/#sample-tracker","title":"Sample Tracker","text":"<p>document$.subscribe(function() {   var tables = document.querySelectorAll(\"article table:not([class])\")   tables.forEach(function(table) {     new Tablesort(table)   }) })</p> sample(s) stage program status queue time cluster run time hrs:min Job # ntaskts (CPU -t) Mem -m file location script script location queue 4/24/2024 puma 24 9673002-missed 62 20 1240 jupyter apples313 alignment blast queue 4/23/2024 puma 24 9670368-missed 62 20 1240 /kcooper/caparicio/tree-fruit/07a_reads_blast apple_blast.ipynb /kcooper/caparicio/tree-fruit/07batch tree fruit reads biom file kraken-biom queue 4/23/2024 puma 12 9666325-missed 42 20 840 /kcooper/caparicio/tree-fruit/05_kraken-biom interactive /kcooper/caparicio/tree-fruit/05batch apples313 arg deeparg queue 4/22/2024 puma 24 9661323-missed 62 20 1240 /kcooper/caparicio/tree-fruit/09_deeparg apple_deeparg.ipynb /kcooper/caparicio/tree-fruit/09batch apples313 arg deeparg in progress 1-22:16:37 puma 24 9607499 62 20 1240 /kcooper/caparicio/tree-fruit/09_deeparg apple_deeparg.ipynb /kcooper/caparicio/tree-fruit/09batch apples313 arg deeparg in progress 1-22:16:37 puma 24 9607499 62 20 1240 /kcooper/caparicio/tree-fruit/09_deeparg apple_deeparg.ipynb /kcooper/caparicio/tree-fruit/09batch apples313 alignment blast in progress 2-13:54:46 puma 24 9544144 62 20 1240 /kcooper/caparicio/tree-fruit/07a_reads_blast apple_blast.ipynb /kcooper/caparicio/tree-fruit/07batch apples313 alignment blast in progress 2-18:24:00 puma 24 9532276 62 20 1240 /kcooper/caparicio/tree-fruit/07a_reads_blast apple_blast.ipynb /kcooper/caparicio/tree-fruit/07batch apples313 alignment blast in progress 0:02:11 puma 24 9514722 62 20 1240 /kcooper/caparicio/tree-fruit/07a_reads_blast apple_blast.ipynb /kcooper/caparicio/tree-fruit/07batch apple assembly metaSPAdes (SPAdes) queue puma 48 9678741 64 25 1600 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch peach assembly metaSPAdes (SPAdes) queue puma 48 9659598 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch peach_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) queue puma 48 9656556 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch orange_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 1-09:33:21 puma 48 9656539 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch peach assembly metaSPAdes (SPAdes) in progress 1-13:59:27 puma 48 9659598 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch peach_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 1-01:53:22 puma 48 9626829 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) in progress 1-20:23:44 puma 48 9607486 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch orange_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch peach assembly metaSPAdes (SPAdes) in progress 2-07:44:37 puma 0:00 9569668 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch peach_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 2-01:55:18 puma 48 9569667 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch peach assembly metaSPAdes (SPAdes) in progress 8-12:40:52 puma 48 9481898 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch peach_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) in progress 1-22:23:40 puma 48 9544142 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch orange_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 5-01:30:51 puma 48 9510852 60 20 1200 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) in progress 8-07:36:36 puma 48 9455659 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch orange_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 9-19:56:59 puma 0:00 9475436 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 9-10:02:53 puma 48 9452625 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) in progress 9-20:30:02 puma 48 9448076 62 20 1240 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apple_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange taxonomic class kraken 2 complete 9-06:30:40 puma 24 9444742 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 kr_orange_reads.ipynb cd /xdisk/kcooper/caparicio/tree-fruit/03batch peach taxonomic class kraken 2 complete 10-03:45:32 puma 24 9444741 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch kr_peach_reads.slurm cd /xdisk/kcooper/caparicio/tree-fruit/03batch orange taxonomic class kraken 2 in progress puma 24 9431841 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch kr_orange_reads.slurm cd /xdisk/kcooper/caparicio/tree-fruit/03batch apple assembly metaSPAdes (SPAdes) in progress puma 0:00 9448076 64 20 1280 cd /xdisk/kcooper/caparicio/tree-fruit/02assembly apple_read_assembly.ipynb cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple assembly metaSPAdes (SPAdes) REDOcompleteBUT NO FASTA puma 48 9004247 64 var var cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apples_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch YumaHarvC10-YumaSoil633 poly-g removal fastp debug puma 0:00 9398738 64 20 1280 cd /xdisk/kcooper/caparicio/MELONS/01c_fastp_reads2 melon_fastp.ipynb melon_soil_fastp.ipynb cd /xdisk/kcooper/caparicio/MELONS/ orange taxonomic class kraken 2 puma 24 9245197 64 32 2048 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch kr_orange_reads.slurm cd /xdisk/kcooper/caparicio/tree-fruit/03batch peach taxonomic class kraken 2 debug puma 24 9245195 64 32 2048 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch kr_peach_reads.slurm cd /xdisk/kcooper/caparicio/tree-fruit/03batch melon poly-g removal fastp debug puma 24 9247470 48 4 192 cd /xdisk/kcooper/caparicio/MELONS/01c_fastp_reads sbatch melon_fastp.slurm cd /xdisk/kcooper/caparicio/MELONS/ melon soil poly-g removal fastp in progress puma 24 9247471 48 4 192 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch melon_soil_fastp.slurm cd /xdisk/kcooper/caparicio/MELONS/ tree-fruit poly-g removal fastp complete puma 0:55 8662642 48 4 192 cd /xdisk/kcooper/caparicio/tree-fruit/01c_fastp_reads sbatch fruit_01c_fastp.slurm cd /xdisk/kcooper/caparicio/tree-fruit melon/soil poly-g removal fastp debug puma 528 9132669 48 4 192 cd /xdisk/kcooper/caparicio/MELONS/01c_fastp_reads sbatch melon_fastp.slurm cd /xdisk/kcooper/caparicio/MELONS apple assembly metaSPAdes (SPAdes) REDOcompleteBUT NO FASTA puma 48 9004247 64 var var cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch apples_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch peach assembly metaSPAdes (SPAdes) killed ocelote 972 2757752 28 var var cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch peach_assem.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) killed elgato 144 1777319 16 var var cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch oranges_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch orange assembly metaSPAdes (SPAdes) killed elgato 144 1777319 16 var var cd /xdisk/kcooper/caparicio/tree-fruit/02assembly sbatch oranges_assembly.slurm cd /xdisk/kcooper/caparicio/tree-fruit/02batch apple taxonomic class kraken 2 complete puma 48 9016680 64 12 768 cd /xdisk/kcooper/caparicio/tree-fruit/03a_reads_kraken2 sbatch kr_apple_reads.slurm cd /xdisk/kcooper/caparicio/tree-fruit/03batch tree fruit fastq to fasta seqtk complete elgato 0:35 1803380 8 4 32 cd /xdisk/kcooper/caparicio/tree-fruit/01d_fasta sbatch tree-fruit_fasta.slurm cd /xdisk/kcooper/caparicio/tree-fruit/01d_fasta"},{"location":"240510/#bioinformatics-workflow","title":"Bioinformatics Workflow","text":""}]}